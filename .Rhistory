rm(list = ls())
rm(list = ls())
#get working directory
getwd()
#Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the KNN classification
dataSet1<-read.csv("/Users/Owner/Desktop/Spring 2023/CS 513 KDD/breast-cancer-wisconsin.csv",na.string = "?" )
View(dataSet1)
n<-as.numeric(as.character(dataSet1$F6))
dataSet1$F6<-n
#Remove the rows with missing values
dataSet1<-na.omit(dataSet1)
#Converting labels to factor class
dataSet1$Class<-factor(dataSet1$Class,levels = c("2","4"),labels = c("benign","malignant"))
#knn classification
#Generating  training set and testing set in the ratio 70% to 30%
size<-sample(1:nrow(dataSet1),0.7*nrow(dataSet1))
n1<-function(x){(x-min(x))/max(x)-min(x)}
#Running min-max normalization on first 4 columns since they are predictor attributes
norm<-as.data.frame(lapply(dataSet1[,c(2,3,4,5,6,7,8,9,10)],n1))
dataSet2<-dataSet1['Class']
#training set
train<-norm[size,]
train2<-dataSet2[size,]
#testing set
test<-norm[size,]
test2<-dataSet2[size,]
#Loading the package class
library(class)
#running  KNN function for k = 3
#classifier<-knn(train[, -1], test[, -1],cl=train2,k=3)
#clf <- knn(train,test,cl=train2,k=3)
clf <- knn(train,test,cl=train2,k=3)
#creating confusion matrix
conf_matrix<-table(clf,test2)
print(conf_matrix)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix)
#running  KNN function for k = 5
clf <- knn(train,test,cl=train2,k=5)
#creating confusion matrix
conf_matrix1<-table(clf,test2)
print(conf_matrix1)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix1)
#running  KNN function for k = 10
clf <- knn(train,test,cl=train2,k=10)
#creating confusion matrix
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
#running  KNN function for k = 15
clf <- knn(train,test,cl=train2,k=15)
#creating confusion matrix
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
#running  KNN function for k = 25
clf <- knn(train,test,cl=train2,k=25)
#creating confusion matrix
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
install.packages("caret")
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
confusionMatrix(clf, test2)
conf_matrix(clf, test2)
library(caret)
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
conf_matrix(clf, test2)
confusionMatrix(clf, test2)
#clearing object environment
rm(list = ls())
#get working directory
getwd()
#Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the KNN classification
dataSet1<-read.csv("/Users/Owner/Desktop/Spring 2023/CS 513 KDD/breast-cancer-wisconsin.csv",na.string = "?" )
View(dataSet1)
n<-as.numeric(as.character(dataSet1$F6))
dataSet1$F6<-n
#Remove the rows with missing values
dataSet1<-na.omit(dataSet1)
#Converting labels to factor class
dataSet1$Class<-factor(dataSet1$Class,levels = c("2","4"),labels = c("benign","malignant"))
#knn classification
#Generating  training set and testing set in the ratio 70% to 30%
size<-sample(1:nrow(dataSet1),0.7*nrow(dataSet1))
n1<-function(x){(x-min(x))/max(x)-min(x)}
#Running min-max normalization on first 4 columns since they are predictor attributes
norm<-as.data.frame(lapply(dataSet1[,c(2,3,4,5,6,7,8,9,10)],n1))
dataSet2<-dataSet1['Class']
#training set
train<-norm[size,]
train2<-dataSet2[size,]
#testing set
test<-norm[size,]
test2<-dataSet2[size,]
#Loading the package class
library(class)
#running  KNN function for k = 3
#classifier<-knn(train[, -1], test[, -1],cl=train2,k=3)
#clf <- knn(train,test,cl=train2,k=3)
clf <- knn(train,test,cl=train2,k=3)
#creating confusion matrix
conf_matrix<-table(clf,test2)
print(conf_matrix)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix)
#running  KNN function for k = 5
clf <- knn(train,test,cl=train2,k=5)
#creating confusion matrix
conf_matrix1<-table(clf,test2)
print(conf_matrix1)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix1)
#running  KNN function for k = 10
clf <- knn(train,test,cl=train2,k=10)
#creating confusion matrix
library(caret)
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
confusionMatrix(clf, test2)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
#Error rate
error<- 100-accuracy
print(error)
#running  KNN function for k = 15
clf <- knn(train,test,cl=train2,k=15)
#creating confusion matrix
library(caret)
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
confusionMatrix(clf, test2)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
#Error rate
error<- 100-accuracy
print(error)
#running  KNN function for k = 25
clf <- knn(train,test,cl=train2,k=25)
#creating confusion matrix
library(caret)
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
confusionMatrix(clf, test2)
#Accuracy calculation
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
#Error rate
error<- 100-accuracy
print(error)
install.packages(sos)
install.packages('sos)
rm(list = ls())
install.packages('sos')
install.packages("sos")
clf <- knn(train,test,cl=train2,k=25)
library(caret)
conf_matrix2<-table(clf,test2)
print(conf_matrix2)
confusionMatrix(clf, test2)
library(sos)
findFn("confusion matrix precision recall FScore")
df<-(confusionMatrix( clf, test2))
dim(df)
df[1,2]/sum(df[1,2:3])
df
df[1,2]/sum(df[1,2:3])
df[1,2]/sum(df[1,1])
df[1,2]/sum(df[1,2])
accuracy<-function(x){sum(diag(x)/sum(rowSums(x)))*100}
accuracy(conf_matrix2)
error<- 1-accuracy
rm(list = ls())
getwd()
getwd()
getwd()
getwd()
#get working directory
getwd()
#Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the EDA analysis
dataSet<-read.csv("/Users/Owner/Desktop/Spring 2023/CS 513 KDD/breast-cancer-wisconsin.csv",na.string = "?" )
#View Breast Cancer Dataset
View(dataSet)
# I. Summarizing each column (e.g. min, max, mean )
summary(dataSet)
#II. Identifying missing values
is.na(dataSet)
print("Number of Missing Values")
print(sum(is.na(dataSet)))
View(dataSet)
#III. Replacing the missing values with the “mean” of the column.
for(i in 1:ncol(dataSet)){
dataSet[is.na(dataSet[,i]),i]<-mean(dataSet[,i],na.rm=TRUE)
}
summary(dataSet)
#Rounding Values to first 3 decimal places
dataSet[,-1]<-round(dataSet[,-1],3)
#IV. Displaying the frequency table of “Class” vs. F6
data<-table(dataSet$Class,dataSet$F6)
ftable(data)
#V. Displaying the scatter plot of F1 to F6, one pair at a time
plot(dataSet[2:7],main="Scatter Plot of F1 to F6",ph=10,col=2)
#VI. Show histogram box plot for columns F7 to F9
boxplot(dataSet[8:10],main="Box Plot for columns F7 to F9")
#Delete all the objects from your R- environment.
rm(list=ls())
#Reload the “breast-cancer-wisconsin.data.csv” from canvas into R.
dataSet<-read.csv("/Users/Owner/Desktop/Spring 2023/CS 513 KDD/breast-cancer-wisconsin.csv",na.string = "?" )
# Remove any row with a missing value in any of the columns.
Data_missing<-na.omit(dataSet)
View(Data_missing)
plot(dataSet[2:7],main="Scatter Plot of F1 to F6",ph=10,col=2)
